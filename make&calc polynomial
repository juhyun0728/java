import java.util.Scanner;

public class Code1 {
	
	static Polynomial [] polys = new Polynomial [100];
	static int n = 0; //현재 저장되어있는 다항식의 갯수

	public static void main(String[] args) {
		Scanner kb = new Scanner (System.in);
		
		while(true) {
			System.out.print("$ ");
			
			String com = kb.next();
			
			if (com.equalsIgnoreCase("create")) {
				char name = kb.next().charAt(0);
				
				polys[n] = new Polynomial();
				polys[n].terms = new Term[100];
				polys[n].name = name;
				polys[n].nTerms = 0;
			
				n++;
			}
			else if (com.equalsIgnoreCase("add")) {
				char name = kb.next().charAt(0);
				int index = find(name);
				if (index == -1) {
					System.out.println("No such polynomial exists.");
				}
				else {
					int c= kb.nextInt();
					int e = kb.nextInt();
					
					addTerm(polys[index] , c, e);
					
				}
				
			}
			else if (com.equalsIgnoreCase("calc")) {
				char name = kb.next().charAt(0);
				int index = find(name);
				if (index == -1) {
					System.out.println("No such polynomial exists.");
				}
				else {
					int x = kb.nextInt();
					
					int result = calcPoly ( polys[index], x);
					
					System.out.println(result);
				}
				
			}
			else if (com.equalsIgnoreCase("print")) {
				char name = kb.next().charAt(0);
				int index = find(name);
				if (index == -1) {
					System.out.println("No such polynomial exists.");
				}
				else {
					for(int i=0;i<polys[index].nTerms;i++) {
						if (i!=0)
							System.out.print(" + ");
						System.out.print(polys[index].terms[i].coef + "x^"+polys[index].terms[i].exp);
					}
					System.out.println();
				
				}
			}
			else if (com.equalsIgnoreCase("exit")) {
				break;
			}
		}
		
		kb.close();
	}
	
	private static int calcPoly(Polynomial p, int x) {
		int Sum=0;
		
		for (int i=0; i<p.nTerms;i++) {
			int X=p.terms[i].coef;
			for (int j=0; j<p.terms[i].exp;j++)
				X *=x;
			Sum +=X;
		}
		
		return Sum;
	}
	private static int find(char name) {
		for (int i=0; i<n;i++) 
			if (polys[i].name == name)
				return i;
		return -1;
	}
	private static void addTerm(Polynomial p, int c, int e) {
		int index = findTerm(p, e);
		if (index == -1) {
			int i = p.nTerms-1;
			while ( i>=0 && p.terms[i].exp < e) {
				p.terms[i+1] = p.terms [i];
				i--;
			}
			p.terms[i+1] = new Term();
			p.terms[i+1].coef = c;
			p.terms[i+1].exp = e;
			p.nTerms++;
		}
		else {
			p.terms[index].coef +=c;
		}
	}
	private static int findTerm(Polynomial p, int e) {
		for (int i=0; i<p.nTerms && p.terms[i].exp >= e ;i++)
			if (p.terms[i].exp ==e )
				return i;
		return -1;
	}
}
